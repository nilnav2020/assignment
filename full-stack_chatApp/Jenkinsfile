pipeline {

  agent { label 'testNode'}

  options {
     timestamps()
  }

  triggers {
     pollscm('* * * * *')
  }

  stages {

    stage('Checkout code') {
       steps {
         dir('/home/ubuntu') 
            {
              git branch: 'main',            
                 credentialsId: 'git',               
                 url: 'https://github.com/nilnav2020/assignment.git'
            }
          } 
        }
   
    stage('Semgrep scan') {
      steps {
         script {
            sh 'docker pull returntocorp/semgrep-agent:v1'
        }

        // Frontend scan
        dir('/home/ubuntu/full-stack_chatApp/frontend') {
            script {
                sh """
                    docker run --rm \
                        -v \$(pwd):/src \
                        --workdir /src \
                        returntocorp/semgrep-agent:v1 semgrep-agent \
                        --config p/ci --config p/security-audit --config p/secrets \
                        --json > fe_report.json || true
                """

                // Count only "ERROR" findings
                sh """
                    CRITICALS=\$(jq '[.results[] | select(.extra.severity=="ERROR")] | length' fe_report.json)
                    echo "Frontend ERROR findings: \$CRITICALS"
                    if [ "\$CRITICALS" -gt 25 ]; then
                        echo "❌ Too many critical issues in frontend (\$CRITICALS > 25)"
                        exit 1
                    fi
                """
            }
        }

        // Backend scan
        dir('/home/ubuntu/full-stack_chatApp/backend') {
            script {
                sh """
                    docker run --rm \
                        -v \$(pwd):/src \
                        --workdir /src \
                        returntocorp/semgrep-agent:v1 semgrep-agent \
                        --config p/ci --config p/security-audit --config p/secrets \
                        --json > be_report.json || true
                """

                // Count only "ERROR" findings
                sh """
                    CRITICALS=\$(jq '[.results[] | select(.extra.severity=="ERROR")] | length' be_report.json)
                    echo "Backend ERROR findings: \$CRITICALS"
                    if [ "\$CRITICALS" -gt 25 ]; then
                        echo "❌ Too many critical issues in backend (\$CRITICALS > 25)"
                        exit 1
                    fi
                """
                    }
                 }
              } 
          }
     
     stage('Unit Tests') {
       steps {
         dir('/home/ubuntu/full-stack_chatApp/backend') {
          sh 'npm ci --omit=dev=false && npm test || true'
          }
         dir('/home/ubuntu/full-stack_chatApp/frontend') {
         sh 'npm ci --omit=dev=false && npm test || true'
          }
        }
      }
    

        stage('Trivy SCA Scan') {
           steps {
             script {
                sh 'docker pull aquasec/trivy:latest'
                sh 'mkdir -p /home/ubuntu/reports'

                        // ---- Frontend SCA scan ----
                dir('/home/ubuntu/full-stack_chatApp/frontend') {
                sh """
                   docker run --rm \
                   -v \$(pwd):/src \
                   -v /home/ubuntu/reports:/reports \
                   aquasec/trivy:latest fs /src \
                   --severity CRITICAL \
                   --format json \
                   --output /reports/fe_sca.json || true
                """

               def feCriticals = sh(
               script: "jq '[.Results[].Vulnerabilities[]? | select(.Severity==\"CRITICAL\")] | length' /home/ubuntu/reports/fe_sca.json",
               returnStdout: true
               ).trim().toInteger()

               echo "Frontend SCA CRITICAL vulnerabilities: ${feCriticals}"
               if (feCriticals > 25) {
               error("❌ Too many CRITICAL vulns in frontend dependencies (${feCriticals} > 25)")
               }
              }

                       // ---- Backend SCA scan ----
             dir('/home/ubuntu/full-stack_chatApp/backend') {
             sh """
                docker run --rm \
                -v \$(pwd):/src \
                -v /home/ubuntu/reports:/reports \
                aquasec/trivy:latest fs /src \
                --severity CRITICAL \
                --format json \
                --output /reports/be_sca.json || true
             """

            def beCriticals = sh(
              script: "jq '[.Results[].Vulnerabilities[]? | select(.Severity==\"CRITICAL\")] | length' /home/ubuntu/reports/be_sca.json",
              returnStdout: true
            ).trim().toInteger()

            echo "Backend SCA CRITICAL vulnerabilities: ${beCriticals}"
            if (beCriticals > 25) {
              error("❌ Too many CRITICAL vulns in backend dependencies (${beCriticals} > 25)")
            }
          }
        }
      }
    }

    

     stage('Build images') {
       steps {
          script {
                       // Authenticate to GHCR
               withCredentials([usernamePassword(credentialsId: 'ghcr-creds', usernameVariable: 'USERNAME', passwordVariable: 'TOKEN')]) {
               sh "echo $TOKEN | docker login ghcr.io -u $USERNAME --password-stdin"
               }

               def feTag = "ghcr.io/nilnav2020/chatapp_fe:${env.BUILD_NUMBER}"
               def beTag = "ghcr.io/nilnav2020/chatapp_be:${env.BUILD_NUMBER}"

                     // ---- Frontend ----
               dir('/home/ubuntu/full-stack_chatApp/frontend') {
                  sh "docker build . -t ${feTag}"
                  sh "docker push ${feTag}"
                 }

                   // ---- Backend ----
               dir('/home/ubuntu/full-stack_chatApp/backend') {
                  sh "docker build . -t ${beTag}"
                  sh "docker push ${beTag}"
                 }
               }
             }
          }


   
      stage('Trivy Image Scan') {
        steps {
          script {
            sh 'docker pull aquasec/trivy:latest'
            sh 'mkdir -p /home/ubuntu/reports'

                       // ---- Frontend image scan ----
            def feTag = "ghcr.io/nilnav2020/chatapp_fe:${env.BUILD_NUMBER}"
            sh """
                docker run --rm \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v /home/ubuntu/reports:/reports \
                    aquasec/trivy:latest image \
                    --severity CRITICAL \
                    --format json \
                    --output /reports/fe_trivy.json \
                    ${feTag} || true
            """

            def feCriticals = sh(
                script: "jq '[.Results[].Vulnerabilities[]? | select(.Severity==\"CRITICAL\")] | length' /home/ubuntu/reports/fe_trivy.json",
                returnStdout: true
            ).trim().toInteger()

            echo "Frontend CRITICAL vulnerabilities: ${feCriticals}"
            if (feCriticals > 25) {
                error("❌ Too many CRITICAL vulns in frontend (${feCriticals} > 25)")
            }

                       // ---- Backend image scan ----
            def beTag = "ghcr.io/nilnav2020/chatapp_be:${env.BUILD_NUMBER}"
            sh """
                docker run --rm \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v /home/ubuntu/reports:/reports \
                    aquasec/trivy:latest image \
                    --severity CRITICAL \
                    --format json \
                    --output /reports/be_trivy.json \
                    ${beTag} || true
            """

            def beCriticals = sh(
                script: "jq '[.Results[].Vulnerabilities[]? | select(.Severity==\"CRITICAL\")] | length' /home/ubuntu/reports/be_trivy.json",
                returnStdout: true
            ).trim().toInteger()

            echo "Backend CRITICAL vulnerabilities: ${beCriticals}"
            if (beCriticals > 25) {
                error("❌ Too many CRITICAL vulns in backend (${beCriticals} > 25)")
            }
          }
        }
      }

     stage('Applying kyVERNO Policies') {
        steps {
         sh '''
         # here we assume jenkins running on ec2 has appropriate IAM roles and policies + aws cli , kubectl installed 
         aws eks update-kubeconfig --name chat-app-cluster --region us-east-1
         
         #  "Installing Kyverno via Helm"
         helm repo add kyverno https://kyverno.github.io/kyverno/
         helm repo update

         # Install kyverno into kyverno namespace
         helm upgrade --install kyverno kyverno/kyverno \
         --namespace kyverno \
         --create-namespace
         
         #  Waiting for Kyverno pods to be ready
         kubectl rollout status deployment kyverno -n kyverno --timeout=120s

         # Deploy kyverno policies
         kubectl apply -f kyverno/
          '''
           }
         }


    
     stage('Deploy to EKS') {
        steps {
         sh '''
         # here we assume jenkins running on ec2 has appropriate IAM roles and policies + kubectl and AWS cli intalled and configured
         aws eks update-kubeconfig --name chat-app-cluster --region us-east-1

         # Deploy manifests
          kubectl apply -f eso/
          kubectl apply -R -f k8s/

          # Roll out new images dynamically
          FE_IMG="ghcr.io/nilnav2020/chatapp_fe:${BUILD_NUMBER}"
          BE_IMG="ghcr.io/nilnav2020/chatapp_be:${BUILD_NUMBER}"

          kubectl set image deploy/frontend frontend=$FE_IMG
          kubectl set image deploy/backend backend=$BE_IMG

          kubectl rollout status deploy/frontend --timeout=180s
          kubectl rollout status deploy/backend --timeout=180s

         '''
        }
      }



}
}
