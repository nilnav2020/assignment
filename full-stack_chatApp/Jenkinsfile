pipeline {

  agent any

  options {
     timestamps()
  }

  triggers {
     pollSCM('* * * * *')
  }

  stages {

    stage('Checkout code') {
       steps {
         dir('/home/ubuntu') 
            {
              git branch: 'main',            
                 url: 'https://github.com/nilnav2020/assignment.git'
            }
          } 
        }
   
    stage('Semgrep scan') {
      steps {
         script {
            sh 'docker pull returntocorp/semgrep-agent:v1'
        }

        // Frontend scan
        dir('/home/ubuntu/full-stack_chatApp/frontend') {
            script {
                sh """
                    docker run --rm \
                        -v \$(pwd):/src \
                        --workdir /src \
                        returntocorp/semgrep-agent:v1 semgrep-agent \
                        --config p/ci --config p/security-audit --config p/secrets \
                        --json > fe_report.json || true
                """

                // Count only "ERROR" findings
                sh """
                    CRITICALS=\$(jq '[.results[] | select(.extra.severity=="ERROR")] | length' fe_report.json)
                    echo "Frontend ERROR findings: \$CRITICALS"
                    if [ "\$CRITICALS" -gt 25 ]; then
                        echo "❌ Too many critical issues in frontend (\$CRITICALS > 25)"
                        exit 1
                    fi
                """
            }
        }

        // Backend scan
        dir('/home/ubuntu/full-stack_chatApp/backend') {
            script {
                sh """
                    docker run --rm \
                        -v \$(pwd):/src \
                        --workdir /src \
                        returntocorp/semgrep-agent:v1 semgrep-agent \
                        --config p/ci --config p/security-audit --config p/secrets \
                        --json > be_report.json || true
                """

                // Count only "ERROR" findings
                sh """
                    CRITICALS=\$(jq '[.results[] | select(.extra.severity=="ERROR")] | length' be_report.json)
                    echo "Backend ERROR findings: \$CRITICALS"
                    if [ "\$CRITICALS" -gt 25 ]; then
                        echo "❌ Too many critical issues in backend (\$CRITICALS > 25)"
                        exit 1
                    fi
                """
                    }
                 }
              } 
          }
     
     stage('Unit Tests') {
       steps {
         dir('/home/ubuntu/full-stack_chatApp/backend') {
          sh 'npm ci --omit=dev=false && npm test || true'
          }
         dir('/home/ubuntu/full-stack_chatApp/frontend') {
         sh 'npm ci --omit=dev=false && npm test || true'
          }
        }
      }
    

        stage('Trivy SCA Scan') {
           steps {
             script {
                sh 'docker pull aquasec/trivy:latest'
                sh 'mkdir -p /home/ubuntu/reports'

                        // ---- Frontend SCA scan ----
                dir('/home/ubuntu/full-stack_chatApp/frontend') {
                sh """
                   docker run --rm \
                   -v \$(pwd):/src \
                   -v /home/ubuntu/reports:/reports \
                   aquasec/trivy:latest fs /src \
                   --severity CRITICAL \
                   --format json \
                   --output /reports/fe_sca.json || true
                """

               def feCriticals = sh(
               script: "jq '[.Results[].Vulnerabilities[]? | select(.Severity==\"CRITICAL\")] | length' /home/ubuntu/reports/fe_sca.json",
               returnStdout: true
               ).trim().toInteger()

               echo "Frontend SCA CRITICAL vulnerabilities: ${feCriticals}"
               if (feCriticals > 25) {
               error("❌ Too many CRITICAL vulns in frontend dependencies (${feCriticals} > 25)")
               }
              }

                       // ---- Backend SCA scan ----
             dir('/home/ubuntu/full-stack_chatApp/backend') {
             sh """
                docker run --rm \
                -v \$(pwd):/src \
                -v /home/ubuntu/reports:/reports \
                aquasec/trivy:latest fs /src \
                --severity CRITICAL \
                --format json \
                --output /reports/be_sca.json || true
             """

            def beCriticals = sh(
              script: "jq '[.Results[].Vulnerabilities[]? | select(.Severity==\"CRITICAL\")] | length' /home/ubuntu/reports/be_sca.json",
              returnStdout: true
            ).trim().toInteger()

            echo "Backend SCA CRITICAL vulnerabilities: ${beCriticals}"
            if (beCriticals > 25) {
              error("❌ Too many CRITICAL vulns in backend dependencies (${beCriticals} > 25)")
            }
          }
        }
      }
    }

    stage('Build images') {
    steps {
        script {
            def feTag = "chatapp_fe:${env.BUILD_NUMBER}"
            def beTag = "chatapp_be:${env.BUILD_NUMBER}"

            // ---- Frontend ----
            dir('/home/ubuntu/full-stack_chatApp/frontend') {
                sh "docker build . -t ${feTag}"
            }

            // ---- Backend ----
            dir('/home/ubuntu/full-stack_chatApp/backend') {
                sh "docker build . -t ${beTag}"
            }

            echo "✅ Built local Docker images: ${feTag}, ${beTag}"
        }
    }
}


   
      stage('Trivy Image Scan') {
        steps {
          script {
            sh 'docker pull aquasec/trivy:latest'
            sh 'mkdir -p /home/ubuntu/reports'

                       // ---- Frontend image scan ----
            def feTag = "chatapp_fe:${env.BUILD_NUMBER}"
            sh """
                docker run --rm \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v /home/ubuntu/reports:/reports \
                    aquasec/trivy:latest image \
                    --severity CRITICAL \
                    --format json \
                    --output /reports/fe_trivy.json \
                    ${feTag} || true
            """

            def feCriticals = sh(
                script: "jq '[.Results[].Vulnerabilities[]? | select(.Severity==\"CRITICAL\")] | length' /home/ubuntu/reports/fe_trivy.json",
                returnStdout: true
            ).trim().toInteger()

            echo "Frontend CRITICAL vulnerabilities: ${feCriticals}"
            if (feCriticals > 25) {
                error("❌ Too many CRITICAL vulns in frontend (${feCriticals} > 25)")
            }

                       // ---- Backend image scan ----
            def beTag = "chatapp_be:${env.BUILD_NUMBER}"
            sh """
                docker run --rm \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    -v /home/ubuntu/reports:/reports \
                    aquasec/trivy:latest image \
                    --severity CRITICAL \
                    --format json \
                    --output /reports/be_trivy.json \
                    ${beTag} || true
            """

            def beCriticals = sh(
                script: "jq '[.Results[].Vulnerabilities[]? | select(.Severity==\"CRITICAL\")] | length' /home/ubuntu/reports/be_trivy.json",
                returnStdout: true
            ).trim().toInteger()

            echo "Backend CRITICAL vulnerabilities: ${beCriticals}"
            if (beCriticals > 25) {
                error("❌ Too many CRITICAL vulns in backend (${beCriticals} > 25)")
            }
          }
        }
      }


stage('Install Kind') {
    steps {
        sh '''
        echo "Granting passwordless sudo rights to jenkins user..."
        # Create a sudoers file for jenkins
        echo "jenkins ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/jenkins
        sudo -n chmod 440 /etc/sudoers.d/jenkins

        echo "Installing Kind..."
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.22.0/kind-linux-amd64
        chmod +x ./kind
        sudo -n mv ./kind /usr/local/bin/kind

        kind --version
        '''
    }
}



stage('Create Kind Cluster') {
  steps {
    sh '''
    echo "Creating Kind cluster..."
    kind create cluster --name chatapp || true
    '''
  }
}

stage('Install kubectl') {
    steps {
        sh '''
        echo "Installing kubectl..."
        KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
        curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client
        '''
    }
}

stage('Applying kyVERNO Policies') {
    steps {
        dir('/home/ubuntu/full-stack_chatApp') {
            sh '''
            # Install Helm (simple method: download latest release)
            curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

            # Add Kyverno repo
            helm repo add kyverno https://kyverno.github.io/kyverno/
            helm repo update

            # Install Kyverno into kyverno namespace
            helm upgrade --install kyverno kyverno/kyverno \
              --namespace kyverno \
              --create-namespace

            # Wait for Kyverno pods to be ready
            echo "⏳ Waiting 120s for Kyverno pods..."
            sleep 120

            # Apply local Kyverno policies from repo folder
            kubectl apply -f kyverno/
            '''
        }
    }
}



stage('Deploy to Kind') {
  steps {
      dir('/home/ubuntu/full-stack_chatApp') {
    sh '''
    # Load images into Kind
    kind load docker-image chatapp_fe:${BUILD_NUMBER} --name chatapp
    kind load docker-image chatapp_be:${BUILD_NUMBER} --name chatapp

    # Apply manifests
    kubectl apply -R -f k8s/

    # Update deployments with fresh tags
    FE_IMG="chatapp_fe:${BUILD_NUMBER}"
    BE_IMG="chatapp_be:${BUILD_NUMBER}"

    kubectl set image deploy/frontend frontend=$FE_IMG
    kubectl set image deploy/backend backend=$BE_IMG

    kubectl rollout status deploy/frontend --timeout=180s
    kubectl rollout status deploy/backend --timeout=180s
    '''
     }
  }
}




}
}
